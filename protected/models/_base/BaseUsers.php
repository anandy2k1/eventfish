<?php

/**
 * This is the model base class for the table "users".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Users".
 *
 * Columns in table "users" available as properties of the model,
 * followed by relations of table "users" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string $role_id
 * @property string $email
 * @property string $password
 * @property string $facebook_id
 * @property integer $is_fblogin
 * @property string $ssn_number
 * @property string $routing_number
 * @property string $account_number
 * @property string $bank_name
 * @property string $first_name
 * @property string $last_name
 * @property string $address_1
 * @property string $address_2
 * @property string $city
 * @property integer $state_id
 * @property integer $country_id
 * @property string $zip
 * @property string $phone
 * @property string $phone_type
 * @property string $date_of_birth
 * @property string $gender
 * @property string $ethnicity
 * @property string $income
 * @property string $matial_status
 * @property string $user_type
 * @property string $short_description
 * @property string $start_time
 * @property string $end_time
 * @property string $available_days
 * @property integer $status
 * @property string $last_login_at
 * @property string $created_at
 * @property string $updated_at
 *
 * @property MstPages[] $mstPages
 * @property MstPages[] $mstPages1
 * @property UserCategories[] $userCategories
 * @property UserComments[] $userComments
 * @property UserComments[] $userComments1
 * @property UserPhotos[] $userPhotoses
 * @property UserTop5Questions[] $userTop5Questions
 * @property UserRole $role
 * @property StateMaster $state
 * @property CountryMaster $country
 */
abstract class BaseUsers extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'users';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Users|Users', $n);
	}

	public static function representingColumn() {
		return 'gender';
	}

	public function rules() {
		return array(
			array('parent_id, is_fblogin, state_id, country_id, status', 'numerical', 'integerOnly'=>true),
			array('role_id', 'length', 'max'=>10),
			array('email, password, facebook_id, ssn_number, routing_number, account_number, bank_name, first_name, last_name, city, zip, phone, phone_type, ethnicity, income, matial_status, available_days', 'length', 'max'=>255),
			array('gender', 'length', 'max'=>6),
			array('user_type', 'length', 'max'=>9),
			array('address_1, address_2, date_of_birth, short_description, start_time, end_time, last_login_at, created_at, updated_at', 'safe'),
			array('parent_id, role_id, email, password, facebook_id, is_fblogin, ssn_number, routing_number, account_number, bank_name, first_name, last_name, address_1, address_2, city, state_id, country_id, zip, phone, phone_type, date_of_birth, gender, ethnicity, income, matial_status, user_type, short_description, start_time, end_time, available_days, status, last_login_at, created_at, updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, parent_id, role_id, email, password, facebook_id, is_fblogin, ssn_number, routing_number, account_number, bank_name, first_name, last_name, address_1, address_2, city, state_id, country_id, zip, phone, phone_type, date_of_birth, gender, ethnicity, income, matial_status, user_type, short_description, start_time, end_time, available_days, status, last_login_at, created_at, updated_at,facebook_picture', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'mstPages' => array(self::HAS_MANY, 'MstPages', 'created_user_id'),
			'mstPages1' => array(self::HAS_MANY, 'MstPages', 'updated_user_id'),
			'userCategories' => array(self::HAS_MANY, 'UserCategories', 'user_id'),
			'userComments' => array(self::HAS_MANY, 'UserComments', 'event_planner_id'),
			'userComments1' => array(self::HAS_MANY, 'UserComments', 'vendor_id'),
			'userPhotoses' => array(self::HAS_MANY, 'UserPhotos', 'user_id'),
			'userTop5Questions' => array(self::HAS_MANY, 'UserTop5Questions', 'vendor_id'),
			'role' => array(self::BELONGS_TO, 'UserRole', 'role_id'),
			'state' => array(self::BELONGS_TO, 'StateMaster', 'state_id'),
			'country' => array(self::BELONGS_TO, 'CountryMaster', 'country_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'parent_id' => Yii::t('app', 'Parent'),
			'role_id' => null,
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'facebook_id' => Yii::t('app', 'Facebook'),
			'is_fblogin' => Yii::t('app', 'Is Fblogin'),
			'ssn_number' => Yii::t('app', 'Ssn Number'),
			'routing_number' => Yii::t('app', 'Routing Number'),
			'account_number' => Yii::t('app', 'Account Number'),
			'bank_name' => Yii::t('app', 'Bank Name'),
			'first_name' => Yii::t('app', 'First Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'address_1' => Yii::t('app', 'Address 1'),
			'address_2' => Yii::t('app', 'Address 2'),
			'city' => Yii::t('app', 'City'),
			'state_id' => null,
			'country_id' => null,
			'zip' => Yii::t('app', 'Zip'),
			'phone' => Yii::t('app', 'Phone'),
			'phone_type' => Yii::t('app', 'Phone Type'),
			'date_of_birth' => Yii::t('app', 'Date Of Birth'),
			'gender' => Yii::t('app', 'Gender'),
			'ethnicity' => Yii::t('app', 'Ethnicity'),
			'income' => Yii::t('app', 'Income'),
			'matial_status' => Yii::t('app', 'Matial Status'),
			'user_type' => Yii::t('app', 'User Type'),
			'short_description' => Yii::t('app', 'Short Description'),
			'start_time' => Yii::t('app', 'Start Time'),
			'end_time' => Yii::t('app', 'End Time'),
			'available_days' => Yii::t('app', 'Available Days'),
			'status' => Yii::t('app', 'Status'),
			'last_login_at' => Yii::t('app', 'Last Login At'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'mstPages' => null,
			'mstPages1' => null,
			'userCategories' => null,
			'userComments' => null,
			'userComments1' => null,
			'userPhotoses' => null,
			'userTop5Questions' => null,
			'role' => null,
			'state' => null,
			'country' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('role_id', $this->role_id);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('facebook_id', $this->facebook_id, true);
		$criteria->compare('is_fblogin', $this->is_fblogin);
		$criteria->compare('ssn_number', $this->ssn_number, true);
		$criteria->compare('routing_number', $this->routing_number, true);
		$criteria->compare('account_number', $this->account_number, true);
		$criteria->compare('bank_name', $this->bank_name, true);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('address_1', $this->address_1, true);
		$criteria->compare('address_2', $this->address_2, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('country_id', $this->country_id);
		$criteria->compare('zip', $this->zip, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('phone_type', $this->phone_type, true);
		$criteria->compare('date_of_birth', $this->date_of_birth, true);
		$criteria->compare('gender', $this->gender, true);
		$criteria->compare('ethnicity', $this->ethnicity, true);
		$criteria->compare('income', $this->income, true);
		$criteria->compare('matial_status', $this->matial_status, true);
		$criteria->compare('user_type', $this->user_type, true);
		$criteria->compare('short_description', $this->short_description, true);
		$criteria->compare('start_time', $this->start_time, true);
		$criteria->compare('end_time', $this->end_time, true);
		$criteria->compare('available_days', $this->available_days, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('last_login_at', $this->last_login_at, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}