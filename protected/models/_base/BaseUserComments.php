<?php

/**
 * This is the model base class for the table "user_comments".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UserComments".
 *
 * Columns in table "user_comments" available as properties of the model,
 * followed by relations of table "user_comments" available as properties of the model.
 *
 * @property integer $id
 * @property integer $event_planner_id
 * @property integer $vendor_id
 * @property string $comment
 *
 * @property Users $vendor
 * @property Users $eventPlanner
 */
abstract class BaseUserComments extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user_comments';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UserComments|UserComments', $n);
	}

	public static function representingColumn() {
		return 'comment';
	}

	public function rules() {
		return array(
			array('event_planner_id, vendor_id', 'numerical', 'integerOnly'=>true),
			array('comment', 'safe'),
			array('event_planner_id, vendor_id, comment', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, event_planner_id, vendor_id, comment', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'vendor' => array(self::BELONGS_TO, 'Users', 'vendor_id'),
			'eventPlanner' => array(self::BELONGS_TO, 'Users', 'event_planner_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'event_planner_id' => null,
			'vendor_id' => null,
			'comment' => Yii::t('app', 'Comment'),
			'vendor' => null,
			'eventPlanner' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('event_planner_id', $this->event_planner_id);
		$criteria->compare('vendor_id', $this->vendor_id);
		$criteria->compare('comment', $this->comment, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}